version: "3"
services:
  zookeeper:
    image: confluentinc/cp-zookeeper
    container_name: zookeeper
    networks:
      - kafka-spark
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000

  kafka1:
    # Exposes 9092 for external connections to the broker
    # Use kafka:29092 for connections internal on the docker network
    # See https://rmoff.net/2018/08/02/kafka-listeners-explained/ for details
    image: confluentinc/cp-kafka
    container_name: kafka1
    depends_on:
      - zookeeper
    networks:
      - kafka-spark
    ports:
      - "9092:9092"
    environment:
      KAFKA_CREATE_TOPICS: parking-lot-log, parking-lot-agg
      KAFKA_BROKER_ID: 1
      KAFKA_NUM_PARTITIONS: 2
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka1:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_DEFAULT_REPLICATION_FACTOR: 2
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 100

  kafka2:
    image: confluentinc/cp-kafka
    container_name: kafka2
    depends_on:
      - zookeeper
    networks:
      - kafka-spark
    ports:
      - "9093:9093"
    environment:
      KAFKA_CREATE_TOPICS: parking-lot-log, parking-lot-agg
      KAFKA_BROKER_ID: 2
      KAFKA_NUM_PARTITIONS: 2
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka2:29093,PLAINTEXT_HOST://localhost:9093
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_DEFAULT_REPLICATION_FACTOR: 2
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 100

  spark-master:
    image: bde2020/spark-master:3.3.0-hadoop3.3
    container_name: spark-master
    networks:
      - kafka-spark
    ports:
      - "8082:8080"
      - "7077:7077"
    environment:
      - INIT_DAEMON_STEP=setup_spark

  spark-worker-1:
    image: bde2020/spark-worker:3.3.0-hadoop3.3
    container_name: spark-worker-1
    networks:
      - kafka-spark
    depends_on:
      - spark-master
    ports:
      - "8083:8081"
    environment:
      - "SPARK_MASTER=spark://spark-master:7077"

  spark-worker-2:
    image: bde2020/spark-worker:3.3.0-hadoop3.3
    container_name: spark-worker-2
    networks:
      - kafka-spark
    depends_on:
      - spark-master
    ports:
      - "8084:8081"
    environment:
      - "SPARK_MASTER=spark://spark-master:7077"

#  producer:
#    image: kafka-producer
#    container_name: producer
#    restart: always
#    depends_on:
#      - kafka1
#      - kafka2
#    networks:
#      - kafka-spark
#
#  consumer1:
#    image: kafka-consumer
#    container_name: consumer1
#    restart: always
#    environment:
#      - KAFKA_CONSUMER_GROUP_ID=consumer-group-1
#    depends_on:
#      - kafka1
#      - kafka2
#    networks:
#      - kafka-spark
#
#  consumer2:
#    image: kafka-consumer
#    container_name: consumer2
#    restart: always
#    environment:
#      - KAFKA_CONSUMER_GROUP_ID=consumer-group-1
#    depends_on:
#      - kafka1
#      - kafka2
#    networks:
#      - kafka-spark

  streaming:
    build:
      context: streaming
      dockerfile: Dockerfile
    ports:
      - "4040:4040"
    container_name: streaming
    depends_on:
      - kafka1
      - kafka2
      - spark-master
      - spark-worker-1
      - spark-worker-2
    networks:
      - kafka-spark

networks:
  kafka-spark:
    driver: "bridge"